package com.erwo.greendao.gen;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.example.dbgreen.bean.Man;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MAN".
*/
public class ManDao extends AbstractDao<Man, Long> {

    public static final String TABLENAME = "MAN";

    /**
     * Properties of entity Man.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property MName = new Property(1, String.class, "mName", false, "M_NAME");
        public final static Property Male = new Property(2, String.class, "male", false, "MALE");
        public final static Property Group = new Property(3, String.class, "group", false, "GROUP");
    }

    private DaoSession daoSession;

    private Query<Man> human_ManListQuery;

    public ManDao(DaoConfig config) {
        super(config);
    }
    
    public ManDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"M_NAME\" TEXT," + // 1: mName
                "\"MALE\" TEXT," + // 2: male
                "\"GROUP\" TEXT);"); // 3: group
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Man entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String mName = entity.getMName();
        if (mName != null) {
            stmt.bindString(2, mName);
        }
 
        String male = entity.getMale();
        if (male != null) {
            stmt.bindString(3, male);
        }
 
        String group = entity.getGroup();
        if (group != null) {
            stmt.bindString(4, group);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Man entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String mName = entity.getMName();
        if (mName != null) {
            stmt.bindString(2, mName);
        }
 
        String male = entity.getMale();
        if (male != null) {
            stmt.bindString(3, male);
        }
 
        String group = entity.getGroup();
        if (group != null) {
            stmt.bindString(4, group);
        }
    }

    @Override
    protected final void attachEntity(Man entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Man readEntity(Cursor cursor, int offset) {
        Man entity = new Man( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // mName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // male
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // group
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Man entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMale(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setGroup(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Man entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Man entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Man entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "manList" to-many relationship of Human. */
    public List<Man> _queryHuman_ManList(String male) {
        synchronized (this) {
            if (human_ManListQuery == null) {
                QueryBuilder<Man> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Male.eq(null));
                human_ManListQuery = queryBuilder.build();
            }
        }
        Query<Man> query = human_ManListQuery.forCurrentThread();
        query.setParameter(0, male);
        return query.list();
    }

}

package com.erwo.greendao.gen;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.example.dbgreen.bean.Human;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HUMAN".
*/
public class HumanDao extends AbstractDao<Human, Long> {

    public static final String TABLENAME = "HUMAN";

    /**
     * Properties of entity Human.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property HuName = new Property(1, String.class, "huName", false, "HU_NAME");
        public final static Property Sex = new Property(2, String.class, "sex", false, "SEX");
        public final static Property Hgroup = new Property(3, String.class, "hgroup", false, "HGROUP");
    }

    private DaoSession daoSession;

    private Query<Human> man_HumanListQuery;

    public HumanDao(DaoConfig config) {
        super(config);
    }
    
    public HumanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HUMAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"HU_NAME\" TEXT," + // 1: huName
                "\"SEX\" TEXT," + // 2: sex
                "\"HGROUP\" TEXT);"); // 3: hgroup
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HUMAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Human entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String huName = entity.getHuName();
        if (huName != null) {
            stmt.bindString(2, huName);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(3, sex);
        }
 
        String hgroup = entity.getHgroup();
        if (hgroup != null) {
            stmt.bindString(4, hgroup);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Human entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String huName = entity.getHuName();
        if (huName != null) {
            stmt.bindString(2, huName);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(3, sex);
        }
 
        String hgroup = entity.getHgroup();
        if (hgroup != null) {
            stmt.bindString(4, hgroup);
        }
    }

    @Override
    protected final void attachEntity(Human entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Human readEntity(Cursor cursor, int offset) {
        Human entity = new Human( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // huName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // sex
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // hgroup
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Human entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setHuName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSex(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setHgroup(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Human entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Human entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Human entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "humanList" to-many relationship of Man. */
    public List<Human> _queryMan_HumanList(String hgroup) {
        synchronized (this) {
            if (man_HumanListQuery == null) {
                QueryBuilder<Human> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Hgroup.eq(null));
                man_HumanListQuery = queryBuilder.build();
            }
        }
        Query<Human> query = man_HumanListQuery.forCurrentThread();
        query.setParameter(0, hgroup);
        return query.list();
    }

}
